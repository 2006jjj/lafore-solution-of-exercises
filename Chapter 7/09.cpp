/*07_09ex.cpp
Очередь - это устройство для хранения данных, похожее на стек. Отличие в том, что в стеке последний сохраненный элемент будет первым извлеченным,
тогда как в очереди первый сохраненный элемент будет первым извлеченным. То есть в стеке используется подход "последний вошел - первый вышел" (LIFO),
а в очереди используется подход "первый вошел - первый вышел" (FIFO). Очередь похожа на простую очередь посетителей магазина: первый, кто встал в очередь, будет обслужен первым.
Перепишите программу STAKARAY из этой главы, включив в нее класс queue вместо класса stack. Кроме того, класс должен иметь два метода: один, называемый put(), для помещения элемента в очередь;
и другой, называемый get(), для извлечения элемента из очереди. Эти методы эквивалентны методам push() и pop() класса stack.
Оба класса, stack и queue, используют массив для хранения данных. Однако вместо одного поля top типа int, как в классе stack, вам понадобятся два поля для очереди: одна, называемая head,
указывающая на начало очереди; и вторая, tail, указывающая на конец очереди. Элементы помещаются в конец очереди (как посетители банка, становящиеся в очередь), а извлекаются из начала очереди.
Конец очереди перемещается к началу по массиву по мере того, как элементы добавляются и извлекаются из очереди. Такие результаты добавляют сложности: если одна из двух переменных head или tail 
примут значение конца массива, то следует вернуться на начало. Таким образом, вам нужно выражение типа
    if (tail == MAX-1)
      tail=-1;
для возврата переменной tail и похожее выражение для возврата переменной head. Массив, используемый в очереди, иногда называют круговым буфером, так как начало и конец очереди циркулируют по нему
вместе с ее данными.*/

#include <iostream>
using namespace std;

class Queue
{
private:
	static const int MAX = 10;
	int st[MAX]{};
	int head, tail;
public:
	Queue() 
{ 
  head = 0; 
  tail = -1; 
}
void put(int var)
{
  if (tail == MAX - 1)
    tail = -1;
  st[++tail] = var;
}

int get()
{
  if (head == MAX)
    head = 0;
  return st[head++];
}
};

int main()
{setlocale(LC_ALL, ".1251"); system("color 0F"); srand(time(NULL));
 
Queue s1;
s1.put(11); 
s1.put(22);
cout << "1: " << s1.get() << endl;
cout << "2: " << s1.get() << endl;
s1.put(33); 
s1.put(44);
cout << "3: " << s1.get() << endl;
cout << "4: " << s1.get() << endl;

cout << endl; system("pause"); return 0;
}
