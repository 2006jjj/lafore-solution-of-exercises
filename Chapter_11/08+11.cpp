/*11_08ex.cpp
Помните программу PARSE из главы 10? Попробуйте доработать ее, чтобы она могла вычислять значения математических выражений с рациональными числами,
например типа float, а не только с одноразрядными числами: 
    3.14159 / 2.0 + 75.25 * 3.3333 + 6.02
Во-первых, нужно развить стек до такой степени, чтобы он мог хранить и оператора (типа char), и числа (типа float). Но как, спрашивается, можно хранить
в стеке значения двух разных типов? Ведь стек - это, по сути дела, массив. Надо еще учесть, что типы char и float даже не совпадают по размеру!
Даже указатели на разные типы данных (char* и float*) компилятор не позволит хранить в одном массиве, несмотря на то, что они одинакового размера.
Единственный способ хранить в массиве два разных типа указателей - сделать эти типы наследниками одного и того же базового класса. При этом базовому классу
даже нет нужны иметь какие-то собственные данные, это может быть абстрактный класс, из которого никакие объекты создаваться не будут.
Конструкторы могут хранить значения в порожденных классах обычным способом, но должна иметься специальная чистая виртуальная функция для того, чтобы извлечь эти значения.
Представляем возможный сценарий работы над этим вопросом:
    class Token
    {
      public:
        virtual float getNumber()=0;
        virtual char getOperator()=0;
    };
    class Operator : public Token
    {
      private:
        char oper;
      public:
        Operator(char);
        char getOperator();
        float getNumber();
    };
    class Number : public Token
    {
      private:
        float fnum;
      public:
        Number(float);
        float getNumber();
        char getOperator();
    };
Token* atoken[100];

Виртуальная функции базового класса должны быть реализованы во всех порожденных классах, в противном случае классы становятся абстрактными.
Таким образом, классу Operand нужна функция getNumber(), несмотря на то, что она фиктивная. Классу Number нужна функция getOperand(), несмотря на то, что она тоже фиктивная.
Поработайте над этим каркасом, сделайте его реально работающей программой, добавив класс Stack, содержащий объекты класса Token, и функцию main(), в которой бы заносились
в стек и извлекались из него разные арифметические операторы и числа в формате с плавающей запятой.


11_11ex.cpp
Выполните изменения в соответствии с упр. 8, применив их к программе PARSE из главы 10. То есть заставьте программу анализировать выражения, содержащие числа в формате 
с плавающей запятой. Совместите классы, предложенные в упр. 8, с алгоритмами из PARSE. Вам придется работать с указателями на символы вместо работы с самими символами.
Это потребует выражений, подобных следующим:
    Number* ptrN = new Number(ans);
    s.push(ptrN);
    and
    Operator* ptrO = new Operator(ch);
    s.push(ptrO);*/


















